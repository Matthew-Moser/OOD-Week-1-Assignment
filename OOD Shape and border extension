public interface Shape {
   void draw();
}
public class Trapazoid implements Shape {

   //Override
   public void draw() {
      System.out.println("Shape: Trapazoid");
   }
}
public class Diamond implements Shape {

   //Override
   public void draw() {
      System.out.println("Shape: Diamond");
   }
}
public abstract class ShapeDecorator implements Shape {
   protected Shape decoratedShape;

   public ShapeDecorator(Shape decoratedShape){
      this.decoratedShape = decoratedShape;
   }

   public void draw(){
      decoratedShape.draw();
   }	
}
public class BlueShapeDecorator extends ShapeDecorator {

   public BlueShapeDecorator(Shape decoratedShape) {
      super(decoratedShape);		
   }

   //Override
   public void draw() {
      decoratedShape.draw();	       
      setBlueBorder(decoratedShape);
   }

   private void setBlueBorder(Shape decoratedShape){
      System.out.println("Border Color: Blue");
   }
}
public class DecoratorPatternDemo {
   public static void main(String[] args) {

      Shape diamond = new Diamond();

      Shape trapazoid = new BlueShapeDecorator(new Trapazoid());

      Shape blueTrapazoid = new BlueShapeDecorator(new Trapazoid());
      System.out.println("Diamond with normal border");
      diamond.draw();

      System.out.println("\nCDiamond with blue border");
      blueDiamond.draw();

      System.out.println("\nTrapazoid with blue border");
      blueTrapazoid.draw();
   }
}
